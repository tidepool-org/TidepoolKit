/*
 * Copyright (c) 2019, Tidepool Project
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the associated License, which is identical to the BSD 2-Clause
 * License as published by the Open Source Initiative at opensource.org.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the License for more details.
 *
 * You should have received a copy of the License along with this program; if
 * not, you can obtain one from Tidepool Project at tidepool.org.
 */

import Foundation

// TODO: break into separate files, add validations, inits, etc

public struct Latitude {
	public let value: Double 	// -90.0 <= x <= 90.0
	public let units = "degrees"
	public init(value: Double) {
		self.value = value
	}
}

public struct Longitude {
	public let value: Double 	// -180.0 <= x <= 180.0
	public let units = "degrees"
	public init(value: Double) {
		self.value = value
	}
}

// TODO: move to common...
public struct Elevation {
	public enum Units: String {
		case feet = "feet"
        case meters = "meters"
	}
	public let value: Double 	// -10000.0 <= x <= 10000.0 meters (and equivalent feet)
	public let units: Units
	public init(value: Double, units: Units) {
		self.value = value
		self.units = units
	}
}

// TODO: move to common...
public struct HorizontalAccuracy {
    public enum Units: String {
        case feet = "feet"
        case meters = "meters"
    }
	public let value: Double 	// 0.0 <= x <= 1000.0 meters (and equivalent feet)]
	public let units: Units
	public init(value: Double, units: Units) {
		self.value = value
		self.units = units
	}
}

// TODO: move to common...
public struct VerticalAccuracy {
    public enum Units: String {
        case feet = "feet"
        case meters = "meters"
    }
	public let value: Double 	// 0.0 <= x <= 1000.0 meters (and equivalent feet)]
	public let units: Units
	public init(value: Double, units: Units) {
		self.value = value
		self.units = units
	}
}

// TODO: move to common...
public struct GPS {
	public var latitude: Latitude? = nil
	public var longitude: Longitude? = nil
	public var elevation: Elevation? = nil
	public var floor: Int? = nil		// -1000 <= x <= 1000]
	public var horizontalAccuracy: HorizontalAccuracy? = nil
	public var verticalAccuracy: VerticalAccuracy? = nil
	public var origin: TPDataOrigin? = nil	// since associated GPS data can be generated by a device other than the base data type]
}

// TODO: move to common...
public struct Location {
	// one or more of name and gps are required
	public var name: String? = nil		// 1 <= len < 100]
	public var gps: GPS? = nil

} 



